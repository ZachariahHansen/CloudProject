AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  CloudProject

  Sample SAM Template for CloudProject

Parameters:
  OpenAIApiKey:
    Type: String
    Description: OpenAI API Key
    NoEcho: true
  ConnectionsTable:
    Type: String
    Description: WebSocket Connections Table Name
    Default: WebSocketConnections
  JWTSecret:
    Type: String
    Description: Secret key for JWT token generation and validation
    Default: "meowmeow"
    NoEcho: true


Globals:
  Api:
    Name: Prod
  Function:
    Timeout: 10
    Environment:
      Variables:
        JWT_SECRET: !Ref JWTSecret
        CONNECTIONS_TABLE: !Ref ConnectionsTable
    MemorySize: 128
    LoggingConfig:
      LogFormat: JSON
  Api:
    Cors:
      AllowMethods: "'*'"
      AllowHeaders: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
      AllowOrigin: "'*'"

Resources:

  #DYNAMODB TABLES
  UsersTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: Cloud_Users
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
        - AttributeName: username
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: username-index
          KeySchema:
            - AttributeName: username
              KeyType: HASH
          Projection:
            ProjectionType: ALL
      BillingMode: PAY_PER_REQUEST

  LobbiesTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: Lobbies
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST

  GamesTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: Games
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST

  WebSocketConnectionsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Ref ConnectionsTable
      AttributeDefinitions:
        - AttributeName: connectionId
          AttributeType: S
        - AttributeName: gameId
          AttributeType: S
      KeySchema:
        - AttributeName: connectionId
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: GameIdIndex
          KeySchema:
            - AttributeName: gameId
              KeyType: HASH
          Projection:
            ProjectionType: ALL
      BillingMode: PAY_PER_REQUEST
      TimeToLiveSpecification:
        AttributeName: TTL
        Enabled: true

  #USER ENDPOINTS
  RegisterUser:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: users/
      Handler: register.lambda_handler
      Runtime: python3.12
      Timeout: 100
      Architectures:
      - x86_64
      Layers:
        - !Ref BcryptLayer
      Policies:
        - AWSLambdaBasicExecutionRole
        - DynamoDBCrudPolicy:
            TableName: !Ref UsersTable
      Events:
        PostUser:
          Type: Api
          Properties:
            Path: /users/register
            Method: post
  RegisterOptionsUser:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: users/
      Handler: register.lambda_handler
      Runtime: python3.12
      Timeout: 100
      Architectures:
      - x86_64
      Layers:
        - !Ref BcryptLayer
      Policies:
        - AWSLambdaBasicExecutionRole
        - DynamoDBCrudPolicy:
            TableName: !Ref UsersTable
      Events:
        PostUser:
          Type: Api
          Properties:
            Path: /users/register
            Method: options

  LoginUser:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: users/
      Handler: login.lambda_handler
      Runtime: python3.12
      Timeout: 100
      Architectures:
      - x86_64
      Layers:
        - !Ref BcryptLayer
      Policies:
        - AWSLambdaBasicExecutionRole
        - DynamoDBCrudPolicy:
            TableName: !Ref UsersTable
      Events:
        GetUser:
          Type: Api
          Properties:
            Path: /users/login
            Method: post
  LoginOptionsUser:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: users/
      Handler: login.lambda_handler
      Runtime: python3.12
      Timeout: 100
      Architectures:
      - x86_64
      Layers:
        - !Ref BcryptLayer
      Policies:
        - AWSLambdaBasicExecutionRole
        - DynamoDBCrudPolicy:
            TableName: !Ref UsersTable
      Events:
        GetUser:
          Type: Api
          Properties:
            Path: /users/login
            Method: options
            
  PutUser:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: users/
      Handler: put.lambda_handler
      Runtime: python3.12
      Architectures:
      - x86_64
      Policies:
        - AWSLambdaBasicExecutionRole
        - DynamoDBCrudPolicy:
            TableName: !Ref UsersTable
      Events:
        PutUser:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /users
            Method: put
  DeleteUser:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: users/
      Handler: delete.lambda_handler
      Runtime: python3.12
      Architectures:
      - x86_64
      Policies:
        - AWSLambdaBasicExecutionRole
        - DynamoDBCrudPolicy:
            TableName: !Ref UsersTable
      Events:
        DeleteUser:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /users
            Method: delete

  BcryptLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: bcrypt-layer
      Description: Layer containing bcrypt library
      ContentUri: bcrypt_layer/
      CompatibleRuntimes:
        - python3.12
      RetentionPolicy: Retain
    Metadata:
      BuildMethod: python3.12

  # LOBBY ENDPOINTS

  CreateLobby:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lobbies/
      Handler: create.lambda_handler
      Runtime: python3.12
      Architectures:
        - x86_64
      Policies:
        - AWSLambdaBasicExecutionRole
        - AmazonDynamoDBFullAccess
      Events:
        CreateLobby:
          Type: Api
          Properties:
            Path: /lobbies
            Method: post

  ListLobbies:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lobbies/
      Handler: list.lambda_handler
      Runtime: python3.12
      Architectures:
        - x86_64
      Policies:
        - AWSLambdaBasicExecutionRole
        - AmazonDynamoDBFullAccess
      Events:
        ListLobbies:
          Type: Api
          Properties:
            Path: /lobbies
            Method: get

  GetLobbyDetails:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lobbies/
      Handler: getdetails.lambda_handler
      Runtime: python3.12
      Architectures:
        - x86_64
      Policies:
        - AWSLambdaBasicExecutionRole
        - AmazonDynamoDBFullAccess
      Events:
        GetLobbyDetails:
          Type: Api
          Properties:
            Path: /lobbies/{lobbyId}
            Method: get

  JoinLobby:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lobbies/
      Handler: join.lambda_handler
      Runtime: python3.12
      Architectures:
        - x86_64
      Policies:
        - AWSLambdaBasicExecutionRole
        - DynamoDBCrudPolicy:
            TableName: !Ref LobbiesTable
        - LambdaInvokePolicy:
            FunctionName: !Ref WebSocketDefaultFunction
      Environment:
        Variables:
          LOBBIES_TABLE: !Ref LobbiesTable
          WEBSOCKET_DEFAULT_FUNCTION: !Ref WebSocketDefaultFunction
      Events:
        JoinLobby:
          Type: Api
          Properties:
            Path: /lobbies/{lobbyId}/join
            Method: post

  LeaveLobby:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lobbies/
      Handler: leave.lambda_handler
      Runtime: python3.12
      Architectures:
        - x86_64
      Policies:
        - AWSLambdaBasicExecutionRole
        - AmazonDynamoDBFullAccess
      Events:
        LeaveLobby:
          Type: Api
          Properties:
            Path: /lobbies/{lobbyId}/leave
            Method: post

  DeleteLobby:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lobbies/
      Handler: delete.lambda_handler
      Runtime: python3.12
      Architectures:
        - x86_64
      Policies:
        - AWSLambdaBasicExecutionRole
        - AmazonDynamoDBFullAccess
      Events:
        DeleteLobby:
          Type: Api
          Properties:
            Path: /lobbies/{lobbyId}
            Method: delete

  #GAMES ENDPOINTS
  StartGame:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: games/
      Handler: start.lambda_handler
      Runtime: python3.12
      Architectures:
        - x86_64
      Policies:
        - AWSLambdaBasicExecutionRole
        - AmazonDynamoDBFullAccess
      Events:
        StartGame:
          Type: Api
          Properties:
            Path: /lobbies/{lobbyId}/start
            Method: post

  GetGameState:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: games/
      Handler: state.lambda_handler
      Runtime: python3.12
      Architectures:
        - x86_64
      Policies:
        - AWSLambdaBasicExecutionRole
        - AmazonDynamoDBFullAccess
      Events:
        GetGameState:
          Type: Api
          Properties:
            Path: /games/{gameId}
            Method: get

  SelectPrompt:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: games/
      Handler: select_prompt.lambda_handler
      Runtime: python3.12
      Architectures:
        - x86_64
      Policies:
        - AWSLambdaBasicExecutionRole
        - AmazonDynamoDBFullAccess
      Events:
        SelectPrompt:
          Type: Api
          Properties:
            Path: /games/{gameId}/prompts/select
            Method: post

  GetRandomPrompt:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: games/
      Handler: random_prompt.lambda_handler
      Runtime: python3.12
      Architectures:
        - x86_64
      Policies:
        - AWSLambdaBasicExecutionRole
        - AmazonDynamoDBFullAccess
      Events:
        GetRandomPrompt:
          Type: Api
          Properties:
            Path: /games/{gameId}/prompts/random
            Method: post

  SubmitResponse:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: games/
      Handler: submit_response.lambda_handler
      Runtime: python3.12
      Architectures:
        - x86_64
      Policies:
        - AWSLambdaBasicExecutionRole
        - AmazonDynamoDBFullAccess
      Events:
        SubmitResponse:
          Type: Api
          Properties:
            Path: /games/{gameId}/responses
            Method: post

  GetRoundResults:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: games/
      Handler: round_results.lambda_handler
      Runtime: python3.12
      Architectures:
        - x86_64
      Policies:
        - AWSLambdaBasicExecutionRole
        - AmazonDynamoDBFullAccess
      Events:
        GetRoundResults:
          Type: Api
          Properties:
            Path: /games/{gameId}/results
            Method: get

  #WEBSOCKET ENDPOINTS
  WebSocketApi:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Name: GameWebSocketApi
      ProtocolType: WEBSOCKET
      RouteSelectionExpression: "$request.body.action"


  # Define WebSocket functions
  WebSocketConnectFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: websocket/
      Handler: connect.lambda_handler
      Runtime: python3.12
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref ConnectionsTable
      Environment:
        Variables:
          CONNECTIONS_TABLE: !Ref ConnectionsTable

  WebSocketDisconnectFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: websocket/
      Handler: disconnect.lambda_handler
      Runtime: python3.12
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref ConnectionsTable
        - DynamoDBCrudPolicy:
            TableName: !Ref LobbiesTable
      Environment:
        Variables:
          CONNECTIONS_TABLE: !Ref ConnectionsTable
          LOBBIES_TABLE: !Ref LobbiesTable

  WebSocketDefaultFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: websocket/
      Handler: default.lambda_handler
      Runtime: python3.12
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref ConnectionsTable
        - DynamoDBCrudPolicy:
            TableName: !Ref LobbiesTable
        - DynamoDBCrudPolicy:
            TableName: !Ref GamesTable
        - Statement:
            - Effect: Allow
              Action:
                - 'execute-api:ManageConnections'
              Resource: '*'
      Environment:
        Variables:
          CONNECTIONS_TABLE: !Ref ConnectionsTable
          LOBBIES_TABLE: !Ref LobbiesTable
          GAMES_TABLE: !Ref GamesTable
          WEBSOCKET_API_ENDPOINT: !Sub 'https://${WebSocketApi}.execute-api.${AWS::Region}.amazonaws.com/Prod'

  # Define WebSocket routes and integrations
  WebSocketConnectRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref WebSocketApi
      RouteKey: $connect
      AuthorizationType: NONE
      OperationName: ConnectRoute
      Target: !Join 
        - '/'
        - - 'integrations'
          - !Ref WebSocketConnectIntegration

  WebSocketConnectIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref WebSocketApi
      IntegrationType: AWS_PROXY
      IntegrationUri: 
        Fn::Sub: 
            arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${WebSocketConnectFunction.Arn}/invocations
  # WebSocket Disconnect Route
  WebSocketDisconnectRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref WebSocketApi
      RouteKey: $disconnect
      AuthorizationType: NONE
      OperationName: DisconnectRoute
      Target: !Join 
        - '/'
        - - 'integrations'
          - !Ref WebSocketDisconnectIntegration

  WebSocketDisconnectIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref WebSocketApi
      IntegrationType: AWS_PROXY
      IntegrationUri: 
        Fn::Sub: 
            arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${WebSocketDisconnectFunction.Arn}/invocations

  # WebSocket Default Route
  WebSocketDefaultRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref WebSocketApi
      RouteKey: $default
      AuthorizationType: NONE
      OperationName: DefaultRoute
      Target: !Join 
        - '/'
        - - 'integrations'
          - !Ref WebSocketDefaultIntegration

  WebSocketDefaultIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref WebSocketApi
      IntegrationType: AWS_PROXY
      IntegrationUri: 
        Fn::Sub: 
            arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${WebSocketDefaultFunction.Arn}/invocations


  # Define WebSocket deployment and stage
  WebSocketDeployment:
    Type: AWS::ApiGatewayV2::Deployment
    DependsOn:
      - WebSocketConnectRoute
      - WebSocketDisconnectRoute
      - WebSocketDefaultRoute
    Properties:
      ApiId: !Ref WebSocketApi

  WebSocketStage:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      StageName: Prod
      Description: Prod Stage
      DeploymentId: !Ref WebSocketDeployment
      ApiId: !Ref WebSocketApi


  # AI EVALUATION ENDPOINTS
  AIEvaluationFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ai/
      Handler: evaluate.lambda_handler
      Runtime: python3.12
      Timeout: 30
      MemorySize: 256
      Environment:
        Variables:
          OPENAI_API_KEY: !Ref OpenAIApiKey
      Policies:
        - AWSLambdaBasicExecutionRole
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /ai/evaluate
            Method: post     

Outputs:
  AIEvaluationFunction:
    Description: "AI Evaluation Lambda Function ARN"
    Value: !GetAtt AIEvaluationFunction.Arn
  AIEvaluationFunctionIamRole:
    Description: "AI Evaluation Lambda Function IAM Role"
    Value: !GetAtt AIEvaluationFunctionRole.Arn
  ApiGatewayApi:
    Description: "API Gateway endpoint URL for Prod stage"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/"
  GamesTableName:
    Description: "Name of the DynamoDB table for games"
    Value: !Ref GamesTable
    Export:
      Name: GamesTableName
  WebSocketApiEndpoint:
    Description: "WebSocket API Endpoint"
    Value: !Sub "wss://${WebSocketApi}.execute-api.${AWS::Region}.amazonaws.com/Prod"
  ConnectionsTableName:
    Description: "WebSocket Connections Table Name"
    Value: !Ref WebSocketConnectionsTable
    Export:
      Name: WebSocketConnectionsTableName