AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  CloudProject

  Sample SAM Template for CloudProject

Parameters:
  OpenAIApiKey:
    Type: String
    Description: OpenAI API Key
    NoEcho: true
  UsersTable:
    Type: String
    Description: Users Table Name
    Default: Cloud_Users


# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 3
    MemorySize: 128

    # You can add LoggingConfig parameters such as the Logformat, Log Group, and SystemLogLevel or ApplicationLogLevel. Learn more here https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-resource-function.html#sam-function-loggingconfig.
    LoggingConfig:
      LogFormat: JSON
Resources:
  ServerlessRestApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Prod
      Cors:
        AllowMethods: "'POST, GET, OPTIONS'"
        AllowHeaders: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
        AllowOrigin: "'*'"
  RegisterUser:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: users/
      Handler: register.lambda_handler
      Runtime: python3.12
      Architectures:
      - x86_64
      Layers:
        - !Ref BcryptLayer
      Policies:
        - AWSLambdaBasicExecutionRole
        - DynamoDBCrudPolicy:
            TableName: !Ref UsersTable
      Events:
        PostUser:
          Type: Api
          Properties:
            Path: /users/register
            Method: post
  LoginUser:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: users/
      Handler: login.lambda_handler
      Runtime: python3.12
      Architectures:
      - x86_64
      Layers:
        - !Ref BcryptLayer
      Policies:
        - AWSLambdaBasicExecutionRole
        - DynamoDBCrudPolicy:
            TableName: !Ref UsersTable
      Events:
        GetUser:
          Type: Api
          Properties:
            Path: /users/login
            Method: post
  PutUser:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: users/
      Handler: put.lambda_handler
      Runtime: python3.12
      Architectures:
      - x86_64
      Policies:
        - AWSLambdaBasicExecutionRole
        - DynamoDBCrudPolicy:
            TableName: !Ref UsersTable
      Events:
        PutUser:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /users
            Method: put
  DeleteUser:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: users/
      Handler: delete.lambda_handler
      Runtime: python3.12
      Architectures:
      - x86_64
      Policies:
        - AWSLambdaBasicExecutionRole
        - DynamoDBCrudPolicy:
            TableName: !Ref UsersTable
      Events:
        DeleteUser:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /users
            Method: delete

  BcryptLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: bcrypt-layer
      Description: Layer containing bcrypt library
      ContentUri: bcrypt_layer/
      CompatibleRuntimes:
        - python3.12
      RetentionPolicy: Retain

  # LOBBY ENDPOINTS

  CreateLobby:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lobbies/
      Handler: create.lambda_handler
      Runtime: python3.12
      Architectures:
        - x86_64
      Policies:
        - AWSLambdaBasicExecutionRole
        - AmazonDynamoDBFullAccess
      Events:
        CreateLobby:
          Type: Api
          Properties:
            Path: /lobbies
            Method: post

  ListLobbies:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lobbies/
      Handler: list.lambda_handler
      Runtime: python3.12
      Architectures:
        - x86_64
      Policies:
        - AWSLambdaBasicExecutionRole
        - AmazonDynamoDBFullAccess
      Events:
        ListLobbies:
          Type: Api
          Properties:
            Path: /lobbies
            Method: get

  GetLobbyDetails:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lobbies/
      Handler: getdetails.lambda_handler
      Runtime: python3.12
      Architectures:
        - x86_64
      Policies:
        - AWSLambdaBasicExecutionRole
        - AmazonDynamoDBFullAccess
      Events:
        GetLobbyDetails:
          Type: Api
          Properties:
            Path: /lobbies/{lobbyId}
            Method: get

  JoinLobby:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lobbies/
      Handler: join.lambda_handler
      Runtime: python3.12
      Architectures:
        - x86_64
      Policies:
        - AWSLambdaBasicExecutionRole
        - AmazonDynamoDBFullAccess
      Events:
        JoinLobby:
          Type: Api
          Properties:
            Path: /lobbies/{lobbyId}/join
            Method: post

  LeaveLobby:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lobbies/
      Handler: leave.lambda_handler
      Runtime: python3.12
      Architectures:
        - x86_64
      Policies:
        - AWSLambdaBasicExecutionRole
        - AmazonDynamoDBFullAccess
      Events:
        LeaveLobby:
          Type: Api
          Properties:
            Path: /lobbies/{lobbyId}/leave
            Method: post

  DeleteLobby:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lobbies/
      Handler: delete.lambda_handler
      Runtime: python3.12
      Architectures:
        - x86_64
      Policies:
        - AWSLambdaBasicExecutionRole
        - AmazonDynamoDBFullAccess
      Events:
        DeleteLobby:
          Type: Api
          Properties:
            Path: /lobbies/{lobbyId}
            Method: delete


  AIEvaluationFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ai/
      Handler: evaluate.lambda_handler
      Runtime: python3.12
      Timeout: 30
      MemorySize: 256
      Environment:
        Variables:
          OPENAI_API_KEY: !Ref OpenAIApiKey
      Policies:
        - AWSLambdaBasicExecutionRole
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /ai/evaluate
            Method: post          

  LobbiesTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: Lobbies
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5

Outputs:
  AIEvaluationFunction:
    Description: "AI Evaluation Lambda Function ARN"
    Value: !GetAtt AIEvaluationFunction.Arn
  AIEvaluationFunctionIamRole:
    Description: "AI Evaluation Lambda Function IAM Role"
    Value: !GetAtt AIEvaluationFunctionRole.Arn
  ApiGatewayApi:
    Description: "API Gateway endpoint URL for Prod stage"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/"